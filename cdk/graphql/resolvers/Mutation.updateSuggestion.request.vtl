#set ($pk = "SUGGESTION")
#set ($sk = $ctx.args.id)

#set($notAllowed = true)
#foreach($group in $context.identity.claims.get("cognito:groups"))
    #if($group == "admin")
        #set($notAllowed = false)
    #end
#end
#if($notAllowed)
  $utils.unauthorized()
#end
  

$util.qr($ctx.args.input.put("updatedAt", $util.time.nowFormatted("yyyy-MM-dd HH:mm:ssZ")))

{
  "version": "2018-05-29",
  "operation": "UpdateItem",
  "key": {
    "pk": $util.dynamodb.toDynamoDBJson($pk),
    "sk": $util.dynamodb.toDynamoDBJson($sk)
  },
  ## Set up some space to keep track of things we're updating **
  #set( $expNames  = {} )
  #set( $expValues = {} )
  #set( $expSet = {} )
  #set( $expAdd = {} )
  #set( $expRemove = [] )

  ## Increment "version" by 1 **
  $!{expAdd.put("version", ":newVersion")}
  $!{expValues.put(":newVersion", { "N" : 1 })}

  ## Iterate through each argument, skipping "id" and "expectedVersion" **
  #foreach( $entry in $context.arguments.input.entrySet() )
    #if( $entry.key != "id" && $entry.key != "expectedVersion" )
      #if( (!$entry.value) && ("$!{entry.value}" == "") )
        ## If the argument is set to "null", then remove that attribute from the item in DynamoDB **

        #set( $discard = ${expRemove.add("#${entry.key}")} )
        $!{expNames.put("#${entry.key}", "$entry.key")}
      #else
        ## Otherwise set (or update) the attribute on the item in DynamoDB **

        $!{expSet.put("#${entry.key}", ":${entry.key}")}
        $!{expNames.put("#${entry.key}", "$entry.key")}

        #if( $entry.key == "ups" || $entry.key == "downs" )
          $!{expValues.put(":${entry.key}", { "N" : $entry.value })}
        #else
          $!{expValues.put(":${entry.key}", { "S" : "${entry.value}" })}
        #end
      #end
    #end
  #end

  ## Start building the update expression, starting with attributes we're going to SET **
  #set( $expression = "" )
  #if( !${expSet.isEmpty()} )
    #set( $expression = "SET" )
    #foreach( $entry in $expSet.entrySet() )
      #set( $expression = "${expression} ${entry.key} = ${entry.value}" )
      #if ( $foreach.hasNext )
        #set( $expression = "${expression}," )
      #end
    #end
  #end

  ## Continue building the update expression, adding attributes we're going to ADD **
  #if( !${expAdd.isEmpty()} )
    #set( $expression = "${expression} ADD" )
    #foreach( $entry in $expAdd.entrySet() )
      #set( $expression = "${expression} ${entry.key} ${entry.value}" )
      #if ( $foreach.hasNext )
        #set( $expression = "${expression}," )
      #end
    #end
  #end

  ## Continue building the update expression, adding attributes we're going to REMOVE **
  #if( !${expRemove.isEmpty()} )
    #set( $expression = "${expression} REMOVE" )

    #foreach( $entry in $expRemove )
      #set( $expression = "${expression} ${entry}" )
      #if ( $foreach.hasNext )
        #set( $expression = "${expression}," )
      #end
    #end
  #end

  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **
  "update" : {
    "expression" : "${expression}"
    #if( !${expNames.isEmpty()} )
      ,"expressionNames" : $utils.toJson($expNames)
    #end
    #if( !${expValues.isEmpty()} )
      ,"expressionValues" : $utils.toJson($expValues)
    #end
  },
  ## TODO double check how much important is this
  ## "condition": {
  ##   "expression": "version = :expectedVersion",
  ##   "expressionValues" : {
  ##     ":expectedVersion" : $util.dynamodb.toDynamoDBJson($ctx.args.expectedVersion)
  ##   }
  ## }
}
